buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

group = 'com.company.challenge'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
    dev
}

dependencies {
    compile ('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-log4j2')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile("io.jsonwebtoken:jjwt:0.7.0")
	compile("mysql:mysql-connector-java:5.1.6")
	runtime('org.hsqldb:hsqldb')
	dev('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.json:json')
	testCompile('org.apache.httpcomponents:httpclient')
	testCompile("junit:junit")
}

docker {
	baseImage = 'develar/java:latest'
	maintainer = 'Ruben Trancoso <rubentrancoso@gmail.com>'
	registry = '837321916725.dkr.ecr.us-west-2.amazonaws.com'
}

task buildDocker(type: Docker) {
  push = project.hasProperty('push')
  tag = '837321916725.dkr.ecr.us-west-2.amazonaws.com/peoplewish-api:latest'
  addFile {
    from jar
    rename {'app.jar'}
  }
  addFile( 'config', '/config' )
  exposePort(8080)
  exposePort(9001)
  entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}

buildDocker.dependsOn(build)

